#!/bin/bash

_require() {
    if [ -z $(which "$1") ]; then
        echo -e "\e[31m$1 not found\e[39m"
        exit
    fi
}

_start(){
    _require docker
    if [[ ! $1 || $1 == "--help" ]]; then
        echo -e "\e[33mUsage:\e[39m docker-host start [CONFIG_ENV_DIR]\n"
        echo -e "\e[33mOptions variables:\e[39m"
        echo -e " name\t\texample"
        echo -e " \e[32mBASE_DIR\e[39m\t~"
        echo -e " \e[32mCONFIGS_DIR\e[39m\t~/Configs"
        echo -e " \e[32mCONFIG_DIR\e[39m\t~/Configs/hello"
        echo -e " \e[32mCONFIG_ENV_DIR\e[39m\t~/Configs/hello/dev"
        echo -e " \e[32mDATA_DIR\e[39m\t~/Data/hello"
        echo -e " \e[32mDATA_ENV_DIR\e[39m\t~/Data/hello/dev"
        echo -e " \e[32mPROJECTS_DIR\e[39m\t~/Projects"
        echo -e " \e[32mCONFIG\e[39m\t\thello"
        echo -e " \e[32mENV\e[39m\t\tdev"
        exit
    fi
    CONFIG_ENV_DIR=$(readlink -e $1)
    if [ $2 ]; then
        CONFIG_ENV_DIR=${CONFIG_ENV_DIR//$(cd && pwd)\/}
        ssh $2 "$(typeset -f); _start ${CONFIG_ENV_DIR}"
        exit
    fi
    CONFIG_DIR=$(readlink -e ${CONFIG_ENV_DIR}/..)
    CONFIGS_DIR=$(readlink -e ${CONFIG_DIR}/..)
    BASE_DIR=$(readlink -e ${CONFIGS_DIR}/..)
    CONFIG=${CONFIG_DIR//${CONFIGS_DIR}/}
    CONFIG=${CONFIG:1}
    ENV=${CONFIG_ENV_DIR//${CONFIG_DIR}/}
    ENV=${ENV:1}
    DATA_DIR=$(readlink -e ${BASE_DIR}/Data/${CONFIG})
    DATA_ENV_DIR=$(readlink -e ${DATA_DIR}/${ENV})
    PROJECTS_DIR=$(readlink -e ${BASE_DIR}/Projects)
    _RUNFILE=${CONFIG_ENV_DIR}/.run
    if [ ! -f ${_RUNFILE} ]; then
        echo -e "\e[31mRun file not found\e[39m"
        exit
    fi
    echo -e "\e[32mKilling containers\e[39m"
    docker kill $(docker ps -q) &> /dev/null
    echo -e "\e[32mRemoving containers\e[39m"
    docker rm $(docker ps -aq) &> /dev/null
    _add_optionsfile(){
        local _OPTIONSFILE=$1
        if [ -f ${_OPTIONSFILE} ]; then
            while read _OPTION
            do
                if [ ${_OPTION:0:1} != '#' ]; then
                    _OPTIONS+=${_OPTION}' '
                fi
            done <${_OPTIONSFILE}
        fi
    }
    _start_imagebuild(){
        local _IMAGEFILE=$1
        local _P_IMAGE=$(head -n 1 ${_IMAGEFILE})
        local _P_IMAGE=${_P_IMAGE//FROM /}
        local _P_IMAGEDIR=${CONFIGS_DIR}/${_P_IMAGE//_//}
        local _P_IMAGEFILE=${_P_IMAGEDIR}/Dockerfile
        if [ ! -f ${_P_IMAGEFILE} ]; then
            return
        fi
        _add_optionsfile ${_P_IMAGEDIR}/.globaloptions
        _start_imagebuild ${_P_IMAGEFILE}
        echo -e "\e[32mBuilding parent image ${_P_IMAGE}\e[39m"
        docker build -t ${_P_IMAGE} ${_P_IMAGEDIR} 2> /dev/null
    }
    for _CONTAINERPATH in $(cat ${_RUNFILE}); do
        _CONTAINERDIR=${CONFIG_ENV_DIR}/${_CONTAINERPATH}
        for _IMAGEFILE in $(find ${_CONTAINERDIR} -name Dockerfile); do
            _CONTAINER=${_IMAGEFILE//${CONFIG_ENV_DIR}/}
            _CONTAINER=${_CONTAINER:1:-11}
            _CONTAINER=${_CONTAINER////_}
            _IMAGE=${CONFIG}/${ENV}_${_CONTAINER}
            _IMAGEDIR=$(dirname ${_IMAGEFILE})
            _OPTIONS=''
            _start_imagebuild ${_IMAGEFILE}
            echo -e "\e[32mBuilding image ${_IMAGE}\e[39m"
            docker build -t ${_IMAGE} ${_IMAGEDIR} 2> /dev/null
            _add_optionsfile ${_IMAGEDIR}/.globaloptions
            _add_optionsfile ${_IMAGEDIR}/.options
            _OPTIONS=$(eval echo ${_OPTIONS})
            echo -e "\e[32mRunning container ${_CONTAINER}\e[39m"
            docker run -h ${_CONTAINER} --name ${_CONTAINER} ${_OPTIONS} -tid ${_IMAGE} 1> /dev/null
        done
    done
}

_stop(){
    _require docker
    if [[ $1 && $1 == "--help" ]]; then
        echo -e "\e[33mUsage:\e[39m docker-host stop ([HOST])\e[39m"
        exit
    fi
    if [ $1 ]; then
        ssh $1 "$(typeset -f); _stop"
        exit
    fi
    echo -e "\e[32mKilling containers\e[39m"
    docker kill $(docker ps -q) &> /dev/null
    echo -e "\e[32mRemoving containers\e[39m"
    docker rm $(docker ps -aq) &> /dev/null
}

_status(){
    _require docker
    _require jq
    if [[ $1 && $1 == "--help" ]]; then
        echo -e "\e[33mUsage:\e[39m docker-host status ([HOST])\e[39m"
        exit
    fi
    if [ $1 ]; then
        ssh $1 "$(typeset -f); _status"
        exit
    fi
    _CONTAINERS_ID=$(docker ps -q)
    if [ ! -n "${_CONTAINERS_ID}" ]; then
        echo -e "\e[31mNo running container\e[39m"
        return
    fi
    _CONTAINERS_JSON=$(docker inspect ${_CONTAINERS_ID} | jq '.[] | {name: .Config.Hostname, image: .Config.Image, links: .HostConfig.Links, ports: .NetworkSettings.Ports, volumes: .HostConfig.Binds}' -c -M | sort -u)
    declare -a _CONTAINERS=()
    for _CONTAINER_JSON in ${_CONTAINERS_JSON[@]}; do
        _CONTAINER_NAME=$(echo "${_CONTAINER_JSON}" | jq '.["name"]' | grep -oE "[a-z_]+")
        echo -e "\e[32m${_CONTAINER_NAME}\e[39m"
        _CONTAINER_IMAGE_NAME=$(echo "${_CONTAINER_JSON}" | jq '.["image"]' | grep -oE "[a-z]+/[a-z_]+")
        echo -e "\e[33m    ${_CONTAINER_IMAGE_NAME}\e[39m"
        _CONTAINER_LINKS=$(echo "${_CONTAINER_JSON}" | jq '.["links"]' | sed -e "s/:\/${_CONTAINER_NAME}\//:/" | grep -oE "[a-z_]+:[a-z_]+" | sort -u)
        for _CONTAINER_LINK in ${_CONTAINER_LINKS[@]}; do
            echo -e "\e[39m    --link ${_CONTAINER_LINK}\e[39m"
        done
        _CONTAINER_PORTS=$(echo "${_CONTAINER_JSON}" | jq '.["ports"]' -c | grep -oE "\"[0-9]+/(tcp|udp)\":[{\"HostIp\":\"[0-9.]+\",\"HostPort\":\"[0-9]+\"")
        for _CONTAINER_PORT in ${_CONTAINER_PORTS[@]}; do
            _HOST_IP=$(echo "${_CONTAINER_PORT}" | grep -oE '"HostIp":"[0-9.]+"' | tr -dc '0-9.')':'
            if [ ${_HOST_IP} == '0.0.0.0:' ]; then
                _HOST_IP=''
            fi
            _HOST_PORT=$(echo "${_CONTAINER_PORT}" | grep -oE '"HostPort":"[0-9]+"' | tr -dc '0-9')':'
            _CONTAINER_PORT=$(echo "${_CONTAINER_PORT}" | grep -oE '[0-9]+/(tcp|udp)' | sed -e "s/\/tcp//")
            echo -e "\e[39m    -p ${_HOST_IP}${_HOST_PORT}${_CONTAINER_PORT}\e[39m"
        done
        _CONTAINER_VOLUMES=$(echo "${_CONTAINER_JSON}" | jq '.["volumes"]' | grep -oE "[A-Za-z_/]+:[A-Za-z_/]+" | sort -u)
        for _CONTAINER_VOLUME in ${_CONTAINER_VOLUMES[@]}; do
            echo -e "\e[39m    -v ${_CONTAINER_VOLUME}\e[39m"
        done
    done
}

_clean(){
    _require docker
    if [[ $1 && $1 == "--help" ]]; then
        echo -e "\e[33mUsage:\e[39m docker-host clean ([HOST])\e[39m"
        exit
    fi
    if [ $1 ]; then
        ssh $1 "$(typeset -f); _clean"
        exit
    fi
    echo -e "\e[32mRemoving exited containers\e[39m"
    docker rm -f $(docker ps -aq -f status=exited) &> /dev/null
    echo -e "\e[32mRemoving untagged images\e[39m"
    docker rmi -f $(docker images | grep "^<none>" | awk "{print \$3}") &> /dev/null
}

_clear(){
    _require docker
    if [[ ! $1 || $1 == "--help" ]]; then
        echo -e "\e[33mUsage:\e[39m docker-host clear [IMAGE_PATTERN] ([HOST])"
        exit
    fi
    if [ $2 ]; then
        ssh $2 "$(typeset -f); _clear $1"
        exit
    fi
    docker kill $(docker ps -q) &> /dev/null
    docker rm $(docker ps -aq) &> /dev/null
    _IMAGES=$(docker images | grep "$1" | awk "{print \$3}")
    docker rmi -f ${_IMAGES} &> /dev/null
}

_login(){
    _require docker
    if [[ ! $1 || $1 == "--help" ]]; then
        echo -e "\e[33mUsage:\e[39m docker-host login ([USER]@)[CONTAINER] ([HOST])\n"
        echo -e "\e[33mInformation:\e[39m The username is root by default."
        exit
    fi
    if [ $2 ]; then
        ssh $2 "$(typeset -f); _login $1"
        exit
    fi
    _CONTAINER=$1
    _USER=root
    _TMP=(${_CONTAINER//@/ })
    if [ ${_TMP[1]} ]; then
        _CONTAINER=${_TMP[1]}
        _USER=${_TMP[0]}
    fi
    docker exec -ti ${_CONTAINER} setuser ${_USER} bash
    #docker exec -ti --privileged --user ${_USER} ${_CONTAINER} bash
}

_export(){
    _require rsync
    if [[ ! $1 || $1 == "--help" ]]; then
        echo -e "\e[33mUsage:\e[39m docker-host export [CONFIG_DIR]\n"
        echo -e "\e[33mInformation:\e[39m The paths are relative to home directory."
        exit
    fi
    _CONFIG_DIR=$(readlink -e $1)
    for _FILE in $(find ${_CONFIG_DIR}/.export -type f); do
        _HOST=${_FILE##*/}
        echo -e "\e[32mExporting on ${_HOST}\e[39m"
        _SOURCES=''
        _EXCLUDES=''
        for _PATH in $(cat ${_FILE}); do
            if [ ${_PATH:0:1} != '#' ]; then
                if [ ${_PATH:0:1} == '!' ]; then
                    _EXCLUDES+='--exclude '${_PATH:1}' '
                else
                    _SOURCES+=${_PATH}' '
                fi
            fi
        done
        cd && rsync ${_EXCLUDES}--delete --delete-excluded -avzRe ssh ${_SOURCES} ${_HOST}:~
    done
}

_import(){
    _require rsync
    if [[ ! $1 || $1 == "--help" ]]; then
        echo -e "\e[33mUsage:\e[39m docker-host import [CONFIG_DIR]\n"
        echo -e "\e[33mInformation:\e[39m The paths are relative to home directory."
        exit
    fi
    _CONFIG_DIR=$(readlink -e $1)
    for _FILE in $(find ${_CONFIG_DIR}/.import -type f); do
        _HOST=${_FILE##*/}
        echo -e "\e[32mImporting from ${_HOST}\e[39m"
        _SOURCES=''
        _EXCLUDES=''
        for _PATH in $(cat ${_FILE}); do
            if [ ${_PATH:0:1} != '#' ]; then
                if [ ${_PATH:0:1} == '!' ]; then
                    _EXCLUDES+='--exclude '${_PATH:1}' '
                else
                    _SOURCES+=${_HOST}:${_PATH}' '
                fi
            fi
        done
        rsync ${_EXCLUDES}--delete --delete-excluded -avzRe ssh ${_SOURCES} ~
    done
}

_update(){
    _require wget
    cd /usr/local/bin
    sudo wget -N https://raw.githubusercontent.com/softilabs/docker-host/master/docker-host
    sudo chmod +x docker-host
}

_usage(){
    echo -e "     _            _                   _               _   "
    echo -e "  __| | ___   ___| | _____ _ __      | |__   ___  ___| |_ "
    echo -e " / _  |/ _ \ / __| |/ / _ \ '__| ___ | '_ \ / _ \/ __| __|"
    echo -e "( (_) | (_) | (__|   <  __/ |   |___|| | | | (_) \__ \ |_ "
    echo -e " \__,_|\___/ \___|_|\_\___|_|        |_| |_|\___/|___/\__|"
    echo -e "                                                          "
    echo -e "A Docker extension to manage multiple containers and more\n"
    echo -e "\e[33mUsage:\e[39m docker-host [COMMAND]\n"
    echo -e "\e[33mCommands:\e[39m"
    echo -e " \e[32mstart\e[39m\t\tStart a configuration"
    echo -e " \e[32mstop\e[39m\t\tStop all containers"
    echo -e " \e[32mstatus\e[39m\t\tList all running containers with their interfaces"
    echo -e " \e[32mclean\e[39m\t\tDelete exited containers and unused images"
    echo -e " \e[32mclear\e[39m\t\tDelete all containers and all images"
    echo -e " \e[32mlogin\e[39m\t\tOpen a bash terminal on a running container"
    echo -e " \e[32mexport\e[39m\t\tExport data to remote host(s)"
    echo -e " \e[32mimport\e[39m\t\tImport data to remote host(s)"
    echo -e " \e[32mupdate\e[39m\t\tUpdate from GitHub"
}

case $1 in
    start) _start $2 $3 ;;
    stop) _stop $2 ;;
    status) _status $2 ;;
    clean) _clean $2 ;;
    clear) _clear $2 ;;
    export) _export $2 ;;
    import) _import $2 ;;
    login) _login $2 $3 ;;
    update) _update ;;
    *) _usage ;;
esac
